<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CamlBuilder4000.Standard</name>
    </assembly>
    <members>
        <member name="T:CamlBuilder4000.CamlBuilder">
            <summary>
            <para>Entry point of caml query building!</para>
            <para><see cref="M:CamlBuilder4000.CamlBuilder.Start"/></para>
            </summary>
        </member>
        <member name="M:CamlBuilder4000.CamlBuilder.Start">
            <summary>
            <para>github.com/ValenteMesmo/CamlBuilder4000</para>
            <para>Intellisense should guide you...</para>
            <para>Example: <code>CamlBuilder.Start().Text("field1").Equal(2)</code></para>
            <para>Don't forget to call <see cref="M:System.Object.ToString"/> at the end!</para>
            </summary>
        </member>
        <member name="T:CamlBuilder4000.FieldTypes.CamlBoolField">
            <summary>
            <para>Presents possible filters to boolean fields</para>
            Examples: <see cref="M:CamlBuilder4000.FieldTypes.CamlBoolField.IsTrue"></see> and <see cref="M:CamlBuilder4000.FieldTypes.CamlBoolField.IsFalse"></see>
            </summary>
        </member>
        <member name="M:CamlBuilder4000.FieldTypes.CamlBoolField.ToString">
            <summary>
            Returns the caml XML as string
            </summary>
        </member>
        <member name="M:CamlBuilder4000.FieldTypes.CamlBoolField.Equal(System.Boolean)">
            <summary>
            <para>Example of related xml:</para>
            &lt;Eq&gt;&lt;FieldRef Name=&quot;fieldName&quot; /&gt;&lt;Value Type=&quot;Boolean&quot;&gt;1&lt;/Value&gt;&lt;/Eq&gt;
            </summary>
        </member>
        <member name="M:CamlBuilder4000.FieldTypes.CamlBoolField.IsTrue">
            <summary>
            <para>Example of related xml:</para>
            &lt;Eq&gt;&lt;FieldRef Name=&quot;fieldName&quot; /&gt;&lt;Value Type=&quot;Boolean&quot;&gt;1&lt;/Value&gt;&lt;/Eq&gt;
            </summary>
        </member>
        <member name="M:CamlBuilder4000.FieldTypes.CamlBoolField.IsFalse">
            <summary>
            <para>Example of related xml:</para>
            &lt;Eq&gt;&lt;FieldRef Name=&quot;fieldName&quot; /&gt;&lt;Value Type=&quot;Boolean&quot;&gt;0&lt;/Value&gt;&lt;/Eq&gt;
            </summary>
        </member>
        <member name="T:CamlBuilder4000.FieldTypes.CamlDateField">
            <summary>
            <para>Presents possible filters to Date fields</para>
            Examples: <see cref="M:CamlBuilder4000.FieldTypes.CamlDateField.Between(System.DateTime,System.DateTime)"></see> and <see cref="M:CamlBuilder4000.FieldTypes.CamlDateField.GreaterThan(System.DateTime)"></see>
            </summary>
        </member>
        <member name="M:CamlBuilder4000.FieldTypes.CamlDateField.ToString">
            <summary>
            Returns the caml XML as string
            </summary>
        </member>
        <member name="M:CamlBuilder4000.FieldTypes.CamlDateField.Between(System.DateTime,System.DateTime)">
             <summary>
             <para>Example of related xml:</para>
            &lt;Geq&gt;<para/>
                &lt;FieldRef Name=&quot;fieldName&quot; /&gt;<para/>
                &lt;Value IncludeTimeValue=&quot;FALSE&quot; Type=&quot;DateTime&quot;&gt;yyyy-MM-ddTHH:mm:ssZ&lt;/Value&gt;<para/>
            &lt;/Geq&gt;<para/>
            &lt;Leq&gt;<para/>
                &lt;FieldRef Name=&quot;fieldName&quot; /&gt;<para/>
                &lt;Value IncludeTimeValue=&quot;FALSE&quot; Type=&quot;DateTime&quot;&gt;yyyy-MM-ddTHH:mm:ssZ&lt;/Value&gt;<para/>
            &lt;/Leq&gt;<para/>
             </summary>
        </member>
        <member name="M:CamlBuilder4000.FieldTypes.CamlDateField.GreaterThan(System.DateTime)">
             <summary>
             <para>Example of related xml:</para>
            &lt;Gt&gt;<para/>
                &lt;FieldRef Name=&quot;fieldName&quot; /&gt;<para/>
                &lt;Value IncludeTimeValue=&quot;FALSE&quot; Type=&quot;DateTime&quot;&gt;yyyy-MM-ddTHH:mm:ssZ&lt;/Value&gt;<para/>
            &lt;/Gt&gt;<para/>
             </summary>
        </member>
        <member name="M:CamlBuilder4000.FieldTypes.CamlDateField.LessThan(System.DateTime)">
             <summary>
             <para>Example of related xml:</para>
            &lt;Lt&gt;<para/>
                &lt;FieldRef Name=&quot;fieldName&quot; /&gt;<para/>
                &lt;Value IncludeTimeValue=&quot;FALSE&quot; Type=&quot;DateTime&quot;&gt;yyyy-MM-ddTHH:mm:ssZ&lt;/Value&gt;<para/>
            &lt;/Lt&gt;<para/>
             </summary>
        </member>
        <member name="M:CamlBuilder4000.FieldTypes.CamlDateField.LessThanOrEqual(System.DateTime)">
             <summary>
             <para>Example of related xml:</para>
            &lt;Leq&gt;<para/>
                &lt;FieldRef Name=&quot;fieldName&quot; /&gt;<para/>
                &lt;Value IncludeTimeValue=&quot;FALSE&quot; Type=&quot;DateTime&quot;&gt;yyyy-MM-ddTHH:mm:ssZ&lt;/Value&gt;<para/>
            &lt;/Leq&gt;<para/>
             </summary>
        </member>
        <member name="M:CamlBuilder4000.FieldTypes.CamlDateField.GreaterThanOrEqual(System.DateTime)">
             <summary>
             <para>Example of related xml:</para>
            &lt;Geq&gt;<para/>
                &lt;FieldRef Name=&quot;fieldName&quot; /&gt;<para/>
                &lt;Value IncludeTimeValue=&quot;FALSE&quot; Type=&quot;DateTime&quot;&gt;yyyy-MM-ddTHH:mm:ssZ&lt;/Value&gt;<para/>
            &lt;/Geq&gt;<para/>
             </summary>
        </member>
        <member name="T:CamlBuilder4000.FieldTypes.CamlLookupIdField">
            <summary>
            <para>Presents possible filters to Lookup ids</para>
            Examples: <see cref="M:CamlBuilder4000.FieldTypes.CamlLookupIdField.In(System.Int32[])"></see> and <see cref="M:CamlBuilder4000.FieldTypes.CamlLookupIdField.Equal(System.Int32)"></see>
            </summary>
        </member>
        <member name="M:CamlBuilder4000.FieldTypes.CamlLookupIdField.ToString">
            <summary>
            Returns the caml XML as string
            </summary>
        </member>
        <member name="M:CamlBuilder4000.FieldTypes.CamlLookupIdField.In(System.Int32[])">
             <summary>
             <para>Example of related xml:</para>
            &lt;In&gt;<para/>
                &lt;FieldRef Name=&quot;fieldName&quot; LookupId=&quot;TRUE&quot; /&gt;<para/>
                &lt;Values&gt;<para/>
                    &lt;Value Type=&quot;Lookup&quot;&gt;1&lt;/Value&gt;<para/>
                    &lt;Value Type=&quot;Lookup&quot;&gt;2&lt;/Value&gt;<para/>
                    &lt;Value Type=&quot;Lookup&quot;&gt;3&lt;/Value&gt;<para/>
                &lt;/Values&gt;<para/>
            &lt;/In&gt;<para/>
             </summary>
        </member>
        <member name="M:CamlBuilder4000.FieldTypes.CamlLookupIdField.Equal(System.Int32)">
            <summary>
            <para>Example of related xml:</para>
            &lt;Eq&gt;&lt;FieldRef Name=&quot;fieldName&quot; LookupId=&quot;TRUE&quot; /&gt;&lt;Value Type=&quot;Lookup&quot;&gt;999&lt;/Value&gt;&lt;/Eq&gt;
            </summary>
        </member>
        <member name="M:CamlBuilder4000.FieldTypes.CamlLookupIdField.NotEqual(System.Int32)">
            <summary>
            <para>Example of related xml:</para>
            &lt;Neq&gt;&lt;FieldRef Name=&quot;fieldName&quot; LookupId=&quot;TRUE&quot; /&gt;&lt;Value Type=&quot;Lookup&quot;&gt;999&lt;/Value&gt;&lt;/Neq&gt;
            </summary>
        </member>
        <member name="M:CamlBuilder4000.FieldTypes.CamlNumberField.ToString">
            <summary>
            Returns the caml XML as string
            </summary>
        </member>
        <member name="M:CamlBuilder4000.FieldTypes.CamlTextField.ToString">
            <summary>
            Returns the caml XML as string
            </summary>
        </member>
        <member name="M:CamlBuilder4000.Internal.CamlFieldPicker.ToString">
            <summary>
            Returns the caml XML as string
            </summary>
        </member>
        <member name="M:CamlBuilder4000.Internal.CamlOperatorPicker.ToString">
            <summary>
            Returns the caml XML as string
            </summary>
        </member>
    </members>
</doc>
